name: Laravel CI/CD

# Se ejecuta en cada push a main (puedes agregar más ramas si quieres)
on:
  push:
    branches: [ main ]

jobs:
  # 1️⃣ Job: Tests
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: notification_hub
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: secret
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      redis:
        image: redis:alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: pdo, pdo_pgsql, zip

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Copy .env
        run: cp .env.example .env

      - name: Generate app key
        run: php artisan key:generate

      - name: Run migrations
        run: php artisan migrate --force

      - name: Run tests
        run: php artisan test

  # 2️⃣ Job: Build Docker image
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t your-dockerhub-username/notification-app:latest -f docker/php/Dockerfile .

      - name: Push Docker image
        run: docker push your-dockerhub-username/notification-app:latest

  # 3️⃣ Job: Deploy to Render
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Render
        uses: render-examples/deploy-to-render@v1
        with:
          apiKey: ${{ secrets.RENDER_API_KEY }}
          serviceId: ${{ secrets.RENDER_SERVICE_ID }}
          branch: main
