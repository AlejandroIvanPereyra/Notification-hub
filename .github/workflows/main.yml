name: Laravel CI/CD

on:
  push:
    branches:
      - main

jobs:
  # ===============================
  # Job de Tests
  # ===============================
  tests:
    runs-on: ubuntu-latest
    env:
      APP_ENV: testing
      APP_DEBUG: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: mbstring, bcmath, pdo_pgsql, zip

      - name: Install Composer
        run: |
          curl -sS https://getcomposer.org/installer | php
          sudo mv composer.phar /usr/local/bin/composer

      - name: Generate .env for tests
        run: |
          cp app/.env.example app/.env
          echo "APP_KEY=base64:SomeRandomKeyForTests" >> app/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> app/.env
          echo "DB_CONNECTION=sqlite" >> app/.env
          echo "DB_DATABASE=:memory:" >> app/.env

      - name: Install PHP dependencies
        run: |
          cd app
          composer install --prefer-dist --no-interaction --no-progress

      - name: Generate app key
        run: |
          cd app
          php artisan key:generate

      - name: Run tests
        run: |
          cd app
          php artisan test

  # ===============================
  #  Job de Build Docker
  # ===============================
  build-docker:
    runs-on: ubuntu-latest
    needs: tests   # se ejecuta solo si los tests pasan

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/notification-app:latest -f docker/php/Dockerfile .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/notification-app:latest

  # ===============================
  #  Job de Deploy a Render
  # ===============================
  deploy-render:
    runs-on: ubuntu-latest
    needs: build-docker   # se ejecuta solo si el build Docker pasa

    steps:
      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          curl -X POST "https://api.render.com/deploy/srv-${RENDER_SERVICE_ID}" \
          -H "Authorization: Bearer ${RENDER_API_KEY}"
